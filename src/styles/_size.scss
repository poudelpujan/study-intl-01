/* The intrinsic width of the underline stroke (in pixels). This is 
   * the same as the height of the cap images. Don't specify the
   * units! This is because of some of the calculations we do later on. */
$underline-intrinsic-width: 8;

/* The actual width of the underline stroke we want to render (in pixels).
   * You can modify this, and the sizing and positioning should be calculated
   * accordingly. Again, Don't specify the units! */
$underline-width: 6;

/* The colour used to draw the underline. It should match the colour
   * used in the cap images... unfortunately we can't modify the SVG
   * fill via CSS because it's a background image. */
$underline-color: #f1a1e3;

/* We need to know the width of the cap images so that we
   * can position everything on the x axis accordingly. */
$underline-cap-width: 4px;

/* The border is positioned relative to the bottom of the line.
   * We can move it upwards a little to create an overlap effect. */
$underline-offset-y: -2px;

/* The padding to add to the x axis. By default, the caps would be
   * aligned with the beginning and end of the line. */
$underline-padding-x: 0.12em;

/* The cap images to use that form the left and right rounded
   * shape. I guess these could be any shape, they don't
   * necessarily have to be round ðŸ™‚.
   */
$cap-image-left: url(https://files-d4s40otz1.now.sh/left.svg);
$cap-image-right: url(https://files-4vvqilj8v.now.sh/right.svg);
$underline-width-scale: calc($underline-width / $underline-intrinsic-width);
